name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${GITHUB_REF#refs/tags/}"
        fi
        
        # Validate version format
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Validated version: $VERSION"
    
    - name: Check if tag exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git tag -l | grep -q "^$VERSION$"; then
          echo "Tag $VERSION already exists"
          exit 1
        fi
    
    - name: Validate changelog
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ -f CHANGELOG.md ]]; then
          if grep -q "$VERSION" CHANGELOG.md; then
            echo "Changelog entry found for $VERSION"
          else
            echo "Warning: No changelog entry found for $VERSION"
          fi
        else
          echo "Warning: CHANGELOG.md not found"
        fi

  run-full-test-suite:
    runs-on: ubuntu-latest
    needs: [validate-release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        npm ci
    
    - name: Run comprehensive test suite
      run: |
        # Linting
        npm run lint
        
        # Unit tests with coverage
        python -m pytest tests/python/unit/ --cov=src --cov-fail-under=85
        npm run test:coverage
        
        # Integration tests
        python -m pytest tests/python/integration/
        
        # Performance tests (quick)
        python tests/performance/run_performance_tests.py --quick
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium
    
    - name: Start test services
      run: |
        python src/api/server.py &
        API_PID=$!
        echo "API_PID=$API_PID" >> $GITHUB_ENV
        
        node tests/e2e/mock-server.js &
        MOCK_PID=$!
        echo "MOCK_PID=$MOCK_PID" >> $GITHUB_ENV
        
        sleep 15
    
    - name: Run E2E tests
      run: npm run test:e2e
    
    - name: Cleanup services
      if: always()
      run: |
        kill $API_PID || true
        kill $MOCK_PID || true

  build-release-assets:
    runs-on: ubuntu-latest
    needs: [validate-release, run-full-test-suite]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Update version in manifests
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        VERSION_NUMBER="${VERSION#v}"  # Remove 'v' prefix
        
        # Update package.json
        node -e "
          const pkg = require('./package.json');
          pkg.version = '$VERSION_NUMBER';
          require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2) + '\n');
        "
        
        # Update extension manifest
        node -e "
          const manifest = require('./extension/manifest.json');
          manifest.version = '$VERSION_NUMBER';
          require('fs').writeFileSync('./extension/manifest.json', JSON.stringify(manifest, null, 2) + '\n');
        "
        
        # Update Python package info
        sed -i "s/version = .*/version = \"$VERSION_NUMBER\"/" src/__init__.py || true
    
    - name: Build production extension
      run: |
        npm run build
        
        # Create optimized build
        cd extension
        
        # Remove development files
        rm -rf src/test/
        rm -rf node_modules/
        rm -f *.log
        rm -f .DS_Store
        
        # Create release package
        zip -r ../ai-detector-extension-${{ needs.validate-release.outputs.version }}.zip . \
          -x "*.git*" "*.log" "*.tmp" "node_modules/*"
    
    - name: Generate release notes
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        cat > release_notes.md << EOF
        # AI Detector Extension $VERSION
        
        ## What's New
        
        This release includes the following improvements and fixes:
        
        $(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD)
        
        ## Performance Metrics
        
        - Detection Speed: < 100ms (P95)
        - API Response Time: < 2s (P95) 
        - Memory Usage: < 50MB peak
        - Throughput: > 1000 tweets/min
        
        ## Installation
        
        ### Chrome Web Store
        Install directly from the [Chrome Web Store](https://chrome.google.com/webstore)
        
        ### Manual Installation
        1. Download \`ai-detector-extension-$VERSION.zip\`
        2. Extract the archive
        3. Open Chrome and navigate to \`chrome://extensions/\`
        4. Enable "Developer mode"
        5. Click "Load unpacked" and select the extracted folder
        
        ## System Requirements
        
        - Chrome/Chromium 88+
        - 100MB available memory
        - Internet connection for AI analysis
        
        ## Configuration
        
        The extension can be configured through the popup interface:
        - Detection threshold
        - Auto-detection settings
        - API endpoint configuration
        - Privacy settings
        
        ## Support
        
        For issues and support, please:
        - Check the [documentation](https://github.com/anthropics/ai-detector/wiki)
        - Search [existing issues](https://github.com/anthropics/ai-detector/issues)
        - Create a [new issue](https://github.com/anthropics/ai-detector/issues/new)
        
        ## Checksums
        
        | File | SHA256 |
        |------|--------|
        | ai-detector-extension-$VERSION.zip | \$(sha256sum ai-detector-extension-$VERSION.zip | cut -d' ' -f1) |
        EOF
    
    - name: Upload release assets
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: |
          ai-detector-extension-${{ needs.validate-release.outputs.version }}.zip
          release_notes.md

  security-scan-release:
    runs-on: ubuntu-latest
    needs: [build-release-assets]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download release assets
      uses: actions/download-artifact@v3
      with:
        name: release-assets
    
    - name: Security scan of release package
      run: |
        # Extract and scan the release package
        unzip ai-detector-extension-*.zip -d release_scan/
        
        # Run security checks
        echo "Scanning for sensitive information..."
        
        # Check for secrets/keys
        if grep -r -i "api[_-]key\|secret\|password\|token" release_scan/ --exclude-dir=.git; then
          echo "❌ Potential secrets found in release package!"
          exit 1
        fi
        
        # Check for development artifacts
        if find release_scan/ -name "*.test.js" -o -name "*.spec.js" -o -name ".env*"; then
          echo "❌ Development artifacts found in release package!"
          exit 1
        fi
        
        # Check permissions in manifest
        python -c "
        import json
        import sys
        
        with open('release_scan/manifest.json') as f:
            manifest = json.load(f)
        
        permissions = manifest.get('permissions', [])
        optional_permissions = manifest.get('optional_permissions', [])
        
        # Check for overly broad permissions
        dangerous_perms = ['<all_urls>', 'background', 'debugger', 'management']
        found_dangerous = [p for p in permissions if p in dangerous_perms]
        
        if found_dangerous:
            print(f'❌ Potentially dangerous permissions: {found_dangerous}')
            sys.exit(1)
        
        print('✅ Security scan passed')
        "
        
        echo "✅ Release package security scan completed"

  create-github-release:
    runs-on: ubuntu-latest
    needs: [validate-release, run-full-test-suite, build-release-assets, security-scan-release]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download release assets
      uses: actions/download-artifact@v3
      with:
        name: release-assets
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: AI Detector Extension ${{ needs.validate-release.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./ai-detector-extension-${{ needs.validate-release.outputs.version }}.zip
        asset_name: ai-detector-extension-${{ needs.validate-release.outputs.version }}.zip
        asset_content_type: application/zip

  chrome-web-store-upload:
    runs-on: ubuntu-latest
    needs: [create-github-release]
    if: ${{ !contains(needs.validate-release.outputs.version, '-') }}  # Only for stable releases
    
    steps:
    - name: Download release assets
      uses: actions/download-artifact@v3
      with:
        name: release-assets
    
    - name: Upload to Chrome Web Store
      run: |
        echo "Uploading to Chrome Web Store..."
        
        # This would typically use the Chrome Web Store API
        # Example implementation:
        
        # curl -H "Authorization: Bearer $CHROME_WEB_STORE_TOKEN" \
        #      -H "x-goog-api-version: 2" \
        #      -X PUT \
        #      -T ai-detector-extension-${{ needs.validate-release.outputs.version }}.zip \
        #      https://www.googleapis.com/upload/chromewebstore/v1.1/items/$CHROME_EXTENSION_ID
        
        echo "Chrome Web Store upload would be implemented here"
        echo "Extension ID: ${{ secrets.CHROME_EXTENSION_ID }}"
        
        # For now, just verify the package
        if [[ -f ai-detector-extension-*.zip ]]; then
          echo "✅ Release package ready for Chrome Web Store"
          echo "📦 Package: $(ls ai-detector-extension-*.zip)"
          echo "📏 Size: $(du -h ai-detector-extension-*.zip | cut -f1)"
        fi
      env:
        CHROME_WEB_STORE_TOKEN: ${{ secrets.CHROME_WEB_STORE_TOKEN }}
        CHROME_EXTENSION_ID: ${{ secrets.CHROME_EXTENSION_ID }}

  post-release-verification:
    runs-on: ubuntu-latest
    needs: [create-github-release]
    
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ needs.validate-release.outputs.version }}
    
    - name: Verify release tag
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Verify we're on the correct tag
        current_tag=$(git describe --exact-match --tags HEAD)
        if [[ "$current_tag" != "$VERSION" ]]; then
          echo "❌ Tag mismatch: expected $VERSION, got $current_tag"
          exit 1
        fi
        
        echo "✅ Release tag verified: $VERSION"
    
    - name: Download and verify release asset
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Download the release asset
        curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -o downloaded-extension.zip \
             "https://api.github.com/repos/${{ github.repository }}/releases/tags/$VERSION"
        
        # Basic verification
        if [[ -f downloaded-extension.zip ]] && [[ $(stat -c%s downloaded-extension.zip) -gt 1000 ]]; then
          echo "✅ Release asset verified"
        else
          echo "❌ Release asset verification failed"
          exit 1
        fi
    
    - name: Smoke test release
      run: |
        echo "Running smoke tests on release..."
        
        # Extract and basic validation
        mkdir -p smoke_test
        cd smoke_test
        unzip ../downloaded-extension.zip
        
        # Verify essential files exist
        essential_files=("manifest.json" "background.js" "content-script.js")
        for file in "${essential_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            echo "❌ Missing essential file: $file"
            exit 1
          fi
        done
        
        # Verify manifest
        if ! python -c "import json; json.load(open('manifest.json'))"; then
          echo "❌ Invalid manifest.json"
          exit 1
        fi
        
        echo "✅ Release smoke test passed"

  notify-release:
    runs-on: ubuntu-latest
    needs: [create-github-release, post-release-verification]
    if: always()
    
    steps:
    - name: Determine release status
      id: status
      run: |
        if [[ "${{ needs.create-github-release.result }}" == "success" && \
              "${{ needs.post-release-verification.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=🎉 Release ${{ needs.validate-release.outputs.version }} published successfully!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Release ${{ needs.validate-release.outputs.version }} failed!" >> $GITHUB_OUTPUT
        fi
    
    - name: Post to Slack
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ steps.status.outputs.status }}
        channel: '#releases'
        username: 'Release Bot'
        text: |
          ${{ steps.status.outputs.message }}
          
          Version: ${{ needs.validate-release.outputs.version }}
          Repository: ${{ github.repository }}
          Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}